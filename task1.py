# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16R_4ATssIdLv9lVtR1pKlNgahjlwJgHD
"""

# Let's first load the provided dataset and inspect its structure.
import pandas as pd

# Load the dataset
file_path = '/content/dataset.csv'
data = pd.read_csv(file_path)

# Show basic info and the first few rows of the dataset to understand its structure
data.info(), data.head()

# Drop the 'Unnamed: 0' column as it doesn't contribute to the task
data_cleaned = data.drop(columns=['Unnamed: 0'])

# Check for missing values in 'Category' and 'SubCategory'
missing_values = data_cleaned[['Category', 'SubCategory']].isnull().sum()

# Drop rows where 'SubCategory' or 'Category' are missing since they are important for classification
data_cleaned = data_cleaned.dropna(subset=['Category', 'SubCategory'])

# Confirm that missing values have been addressed
missing_values_after = data_cleaned[['Category', 'SubCategory']].isnull().sum()

missing_values, missing_values_after

import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer

# Function to clean text (lowercasing and removing special characters)
def clean_text(text):
    text = text.lower()  # convert to lowercase
    text = re.sub(r'[^\w\s]', '', text)  # remove punctuation
    return text

# Apply the cleaning function to the 'Description' column
data_cleaned['Cleaned_Description'] = data_cleaned['Description'].apply(clean_text)

# Define the feature (Cleaned_Description) and target (SubCategory)
X = data_cleaned['Cleaned_Description']
y = data_cleaned['SubCategory']

# Use TF-IDF to vectorize the product descriptions
vectorizer = TfidfVectorizer(max_features=5000)
X_tfidf = vectorizer.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

# Initialize the Logistic Regression model
model = LogisticRegression(max_iter=1000, random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model performance using accuracy and detailed classification report
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

accuracy, report

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(max_iter=1000, random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import classification_report, accuracy_score
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print(report)